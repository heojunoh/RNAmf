% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predRNAmf_three_level.R
\name{predRNAmf_three_level}
\alias{predRNAmf_three_level}
\title{predictive posterior mean and variance of the model with fidelity level 1, 2 and 3.}
\usage{
predRNAmf_three_level(fit, x)
}
\arguments{
\item{fit}{an object of class RNAmf_three_level.}

\item{x}{vector or matrix of new input locations to predict.}
}
\value{
A list predictive posterior mean and variance:
\itemize{
  \item \code{mu}: vector of predictive posterior mean.
  \item \code{sig2}: vector of predictive posterior variance.
}

#' @importFrom plgp distance
}
\description{
The function computes the posterior mean and variance of RNA models with three fidelity levels
by fitted model using \code{\link{RNAmf_three_level}}.
}
\details{
From the model fitted by \code{\link{RNAmf_three_level}},
the posterior mean and variance are calculated based on the closed form expression derived by a recursive fashion.
The formulae depend on its kernel choices.
For Matern kernels, \code{\link{zetafun}} computes the part of the posterior variance.
For details, see Heo and Sung (2023+, <arXiv:2309.11772>).
}
\examples{
library(MuFiCokriging)
library(lhs)

### Branin function ###
branin <- function(xx){
  x1 <- xx[1]
  x2 <- xx[2]

  (-1.275*x1^2/pi^2+5*x1/pi+x2-6)^2 + (10-5/(4*pi))*cos(x1)+ 10
}

braninm <- function(xx)
{
  x1 <- xx[1]
  x2 <- xx[2]

  10*sqrt((-1.275*(x1+2)^2/pi^2+5*(x1+2)/pi+(x2+2)-6)^2 + (10-5/(4*pi))*cos((x1+2))+ 10) +
  2*(x1-0.5) - 3*(3*x2-1) - 1
}

braninl <- function(xx)
{ x1 <- xx[1]
x2 <- xx[2]

10*sqrt((-1.275*(1.2*x1+0.4)^2/pi^2+5*(1.2*x1+0.4)/pi+(1.2*x2+0.4)-6)^2 +
(10-5/(4*pi))*cos((1.2*x1+0.4))+ 10) + 2*(1.2*x1+1.9) - 3*(3*(1.2*x2+2.4)-1) - 1 - 3*x2 + 1
}

output.branin <- function(x){
  factor_range <- list("x1" = c(-5, 10), "x2" = c(0, 15))

  for(i in 1:length(factor_range)) x[i] <- factor_range[[i]][1] + x[i] * diff(factor_range[[i]])
  branin(x[1:2])
}

output.braninl <- function(x){
  factor_range <- list("x1" = c(-5, 10), "x2" = c(0, 15))

  for(i in 1:length(factor_range)) x[i] <- factor_range[[i]][1] + x[i] * diff(factor_range[[i]])
  braninl(x[1:2])
}

output.braninm <- function(x){
  factor_range <- list("x1" = c(-5, 10), "x2" = c(0, 15))

  for(i in 1:length(factor_range)) x[i] <- factor_range[[i]][1] + x[i] * diff(factor_range[[i]])
  braninm(x[1:2])
}


### training data ###
n1 <- 20; n2 <- 15; n3 <- 10

X1 <- maximinLHS(n1, 2)
X2 <- maximinLHS(n2, 2)
X3 <- maximinLHS(n3, 2)

NestDesign <- NestedDesignBuild(design = list(X1,X2,X3))

X1 <- NestDesign$PX
X2 <- ExtractNestDesign(NestDesign,2)
X3 <- ExtractNestDesign(NestDesign,3)

y1 <- apply(X1,1,output.braninl)
y2 <- apply(X2,1,output.braninm)
y3 <- apply(X3,1,output.branin)

### test data ###
x <- maximinLHS(1000, 2)

### fitting ###
fit.RNAmf <- RNAmf_three_level(X1, y1, X2, y2, X3, y3, kernel="sqex", constant=TRUE)
pred.RNAmf <- predRNAmf_three_level(fit.RNAmf, x)
predy <- pred.RNAmf$mu
predsig2 <- pred.RNAmf$sig2

### RMSE ###
sqrt(mean((predy-apply(x,1,output.branin))^2))

}
\seealso{
\code{\link{RNAmf_three_level}} for prediction.
}
